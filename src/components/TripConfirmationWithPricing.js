import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  TextInput,\n  ActivityIndicator,\n} from 'react-native';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport CompetitivePricingService from '../services/competitivePricingService';\nimport CompetitivePriceComparison from './CompetitivePriceComparison';\n\nconst TripConfirmationWithPricing = ({\n  visible,\n  onClose,\n  onConfirm,\n  originalPrice,\n  distance,\n  estimatedTime,\n  origin,\n  destination,\n  selectedVehicle = 'standard',\n}) => {\n  const [yangoPrice, setYangoPrice] = useState('');\n  const [finalPrice, setFinalPrice] = useState(originalPrice);\n  const [priceComparison, setPriceComparison] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Recalcular pre√ßo quando houver mudan√ßas\n  useEffect(() => {\n    calculateCompetitivePrice();\n  }, [originalPrice, yangoPrice]);\n\n  const calculateCompetitivePrice = () => {\n    if (!originalPrice) return;\n\n    try {\n      const yangoValue = yangoPrice ? parseInt(yangoPrice.replace(/[^0-9]/g, '')) : null;\n      \n      if (yangoValue && yangoValue > 0) {\n        // Usar precifica√ß√£o competitiva baseada na Yango\n        const competitive = CompetitivePricingService.calculateCompetitivePrice(yangoValue);\n        setFinalPrice(competitive.ourPrice);\n        \n        const comparison = CompetitivePricingService.getPriceComparison(originalPrice, yangoValue);\n        setPriceComparison(comparison);\n      } else {\n        // Aplicar desconto padr√£o se n√£o tiver pre√ßo da Yango\n        const result = CompetitivePricingService.applyCompetitiveDiscount(originalPrice, null);\n        setFinalPrice(result.finalPrice);\n        \n        const comparison = CompetitivePricingService.getPriceComparison(originalPrice, null);\n        setPriceComparison(comparison);\n      }\n    } catch (error) {\n      console.error('Erro ao calcular pre√ßo competitivo:', error);\n      setFinalPrice(originalPrice);\n      setPriceComparison(null);\n    }\n  };\n\n  const handleYangoPriceChange = (text) => {\n    // Permitir apenas n√∫meros e formatar automaticamente\n    const numericValue = text.replace(/[^0-9]/g, '');\n    if (numericValue) {\n      const formattedValue = parseInt(numericValue).toLocaleString() + ' Kz';\n      setYangoPrice(formattedValue);\n    } else {\n      setYangoPrice('');\n    }\n  };\n\n  const handleConfirm = async () => {\n    setIsLoading(true);\n\n    const yangoValue = yangoPrice ? parseInt(yangoPrice.replace(/[^0-9]/g, '')) : null;\n    const savings = yangoValue ? (yangoValue - finalPrice) : (originalPrice - finalPrice);\n    \n    Alert.alert(\n      'Confirmar viagem',\n      `Pre√ßo final: ${finalPrice.toLocaleString()} Kz\\n${\n        yangoValue \n          ? `Economia vs Yango: ${savings.toLocaleString()} Kz` \n          : `Desconto aplicado: ${savings.toLocaleString()} Kz`\n      }\\n\\nConfirmar solicita√ß√£o?`,\n      [\n        {\n          text: 'Cancelar',\n          style: 'cancel',\n          onPress: () => setIsLoading(false),\n        },\n        {\n          text: 'Confirmar',\n          onPress: async () => {\n            try {\n              await onConfirm?.({\n                originalPrice,\n                finalPrice,\n                yangoPrice: yangoValue,\n                savings,\n                distance,\n                estimatedTime,\n                origin,\n                destination,\n                vehicleType: selectedVehicle,\n                competitivePricing: priceComparison,\n              });\n            } catch (error) {\n              Alert.alert('Erro', 'N√£o foi poss√≠vel confirmar a viagem');\n            } finally {\n              setIsLoading(false);\n            }\n          },\n        },\n      ]\n    );\n  };\n\n  const formatPrice = (price) => {\n    return `${price.toLocaleString()} Kz`;\n  };\n\n  if (!visible) return null;\n\n  return (\n    <View style={styles.overlay}>\n      <View style={styles.modal}>\n        {/* Header */}\n        <View style={styles.header}>\n          <Text style={styles.title}>üí∞ Confirmar Viagem</Text>\n          <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n            <Ionicons name=\"close\" size={24} color=\"#666\" />\n          </TouchableOpacity>\n        </View>\n\n        <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n          {/* Informa√ß√µes da Viagem */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>üìç Detalhes da Viagem</Text>\n            \n            <View style={styles.routeInfo}>\n              <View style={styles.routePoint}>\n                <View style={[styles.dot, styles.originDot]} />\n                <Text style={styles.addressText} numberOfLines={1}>\n                  {origin?.address || 'Origem'}\n                </Text>\n              </View>\n              \n              <View style={styles.routeLine} />\n              \n              <View style={styles.routePoint}>\n                <View style={[styles.dot, styles.destinationDot]} />\n                <Text style={styles.addressText} numberOfLines={1}>\n                  {destination?.address || 'Destino'}\n                </Text>\n              </View>\n            </View>\n            \n            <View style={styles.tripStats}>\n              <View style={styles.statItem}>\n                <Ionicons name=\"location\" size={16} color=\"#666\" />\n                <Text style={styles.statText}>{distance?.toFixed(1)} km</Text>\n              </View>\n              <View style={styles.statItem}>\n                <Ionicons name=\"time\" size={16} color=\"#666\" />\n                <Text style={styles.statText}>{estimatedTime} min</Text>\n              </View>\n            </View>\n          </View>\n\n          {/* Campo para pre√ßo da Yango */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>üèÜ Pre√ßo da Concorr√™ncia (Opcional)</Text>\n            <Text style={styles.sectionSubtitle}>\n              Digite o pre√ßo que a Yango est√° cobrando para obter um pre√ßo ainda mais competitivo\n            </Text>\n            \n            <View style={styles.inputContainer}>\n              <MaterialIcons name=\"attach-money\" size={20} color=\"#666\" />\n              <TextInput\n                style={styles.priceInput}\n                placeholder=\"Ex: 4000 Kz\"\n                value={yangoPrice}\n                onChangeText={handleYangoPriceChange}\n                keyboardType=\"numeric\"\n                maxLength={20}\n              />\n            </View>\n            \n            {yangoPrice && (\n              <Text style={styles.helpText}>\n                üí° Baseado neste pre√ßo, ofereceremos um valor mais competitivo\n              </Text>\n            )}\n          </View>\n\n          {/* Compara√ß√£o de Pre√ßos */}\n          <CompetitivePriceComparison \n            originalPrice={originalPrice}\n            yangoPrice={yangoPrice ? parseInt(yangoPrice.replace(/[^0-9]/g, '')) : null}\n            style={styles.priceComparison}\n          />\n\n          {/* Detalhamento do Pre√ßo */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>üí≥ Resumo do Pagamento</Text>\n            \n            <View style={styles.priceBreakdown}>\n              <View style={styles.priceRow}>\n                <Text style={styles.priceLabel}>Pre√ßo original</Text>\n                <Text style={[styles.priceValue, originalPrice !== finalPrice && styles.strikethrough]}>\n                  {formatPrice(originalPrice)}\n                </Text>\n              </View>\n              \n              {originalPrice !== finalPrice && (\n                <View style={styles.priceRow}>\n                  <Text style={styles.priceLabel}>Desconto aplicado</Text>\n                  <Text style={[styles.priceValue, styles.savingsText]}>\n                    -{formatPrice(originalPrice - finalPrice)}\n                  </Text>\n                </View>\n              )}\n              \n              <View style={styles.divider} />\n              \n              <View style={styles.priceRow}>\n                <Text style={styles.totalLabel}>Valor final</Text>\n                <Text style={styles.totalValue}>{formatPrice(finalPrice)}</Text>\n              </View>\n            </View>\n            \n            <View style={styles.paymentMethod}>\n              <MaterialIcons name=\"payments\" size={20} color=\"#28a745\" />\n              <Text style={styles.paymentText}>Pagamento em dinheiro ao motorista</Text>\n            </View>\n          </View>\n        </ScrollView>\n\n        {/* Bot√µes de A√ß√£o */}\n        <View style={styles.actions}>\n          <TouchableOpacity \n            style={[styles.button, styles.cancelButton]} \n            onPress={onClose}\n            disabled={isLoading}\n          >\n            <Text style={styles.cancelButtonText}>Cancelar</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={[styles.button, styles.confirmButton]} \n            onPress={handleConfirm}\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <ActivityIndicator color=\"white\" size=\"small\" />\n            ) : (\n              <Text style={styles.confirmButtonText}>Confirmar por {formatPrice(finalPrice)}</Text>\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'flex-end',\n    zIndex: 1000,\n  },\n  \n  modal: {\n    backgroundColor: 'white',\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    maxHeight: '90%',\n    minHeight: '60%',\n  },\n  \n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n  },\n  \n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333',\n  },\n  \n  closeButton: {\n    padding: 4,\n  },\n  \n  content: {\n    flex: 1,\n    padding: 20,\n  },\n  \n  section: {\n    marginBottom: 24,\n  },\n  \n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#333',\n    marginBottom: 8,\n  },\n  \n  sectionSubtitle: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  \n  routeInfo: {\n    backgroundColor: '#f8f9fa',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n  },\n  \n  routePoint: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 4,\n  },\n  \n  dot: {\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n    marginRight: 12,\n  },\n  \n  originDot: {\n    backgroundColor: '#28a745',\n  },\n  \n  destinationDot: {\n    backgroundColor: '#dc3545',\n  },\n  \n  routeLine: {\n    width: 2,\n    height: 20,\n    backgroundColor: '#ddd',\n    marginLeft: 5,\n    marginVertical: 2,\n  },\n  \n  addressText: {\n    flex: 1,\n    fontSize: 14,\n    color: '#333',\n  },\n  \n  tripStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#e9ecef',\n  },\n  \n  statItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  \n  statText: {\n    fontSize: 14,\n    color: '#666',\n  },\n  \n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#f8f9fa',\n    borderRadius: 10,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  \n  priceInput: {\n    flex: 1,\n    fontSize: 16,\n    marginLeft: 8,\n    paddingVertical: 8,\n    color: '#333',\n  },\n  \n  helpText: {\n    fontSize: 12,\n    color: '#28a745',\n    marginTop: 6,\n    fontStyle: 'italic',\n  },\n  \n  priceComparison: {\n    marginBottom: 24,\n  },\n  \n  priceBreakdown: {\n    backgroundColor: '#f8f9fa',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n  },\n  \n  priceRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 4,\n  },\n  \n  priceLabel: {\n    fontSize: 14,\n    color: '#666',\n  },\n  \n  priceValue: {\n    fontSize: 14,\n    color: '#333',\n    fontWeight: '500',\n  },\n  \n  strikethrough: {\n    textDecorationLine: 'line-through',\n    color: '#999',\n  },\n  \n  savingsText: {\n    color: '#28a745',\n  },\n  \n  divider: {\n    height: 1,\n    backgroundColor: '#e9ecef',\n    marginVertical: 8,\n  },\n  \n  totalLabel: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#333',\n  },\n  \n  totalValue: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#28a745',\n  },\n  \n  paymentMethod: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    padding: 12,\n    backgroundColor: '#d4edda',\n    borderRadius: 8,\n  },\n  \n  paymentText: {\n    fontSize: 14,\n    color: '#155724',\n    fontWeight: '500',\n  },\n  \n  actions: {\n    flexDirection: 'row',\n    padding: 20,\n    gap: 12,\n    borderTopWidth: 1,\n    borderTopColor: '#e9ecef',\n  },\n  \n  button: {\n    flex: 1,\n    paddingVertical: 14,\n    borderRadius: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: 48,\n  },\n  \n  cancelButton: {\n    backgroundColor: '#f8f9fa',\n    borderWidth: 1,\n    borderColor: '#dee2e6',\n  },\n  \n  cancelButtonText: {\n    fontSize: 16,\n    color: '#666',\n    fontWeight: '600',\n  },\n  \n  confirmButton: {\n    backgroundColor: '#28a745',\n  },\n  \n  confirmButtonText: {\n    fontSize: 16,\n    color: 'white',\n    fontWeight: '600',\n  },\n});\n\nexport default TripConfirmationWithPricing;
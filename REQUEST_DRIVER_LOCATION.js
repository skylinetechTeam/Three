// SCRIPT PARA SOLICITAR LOCALIZA√á√ÉO DO MOTORISTA PERIODICAMENTE

import apiService from './services/apiService';

/**
 * Solicita a localiza√ß√£o do motorista periodicamente
 * @param {string} driverId - ID do motorista
 * @param {string} rideId - ID da corrida
 * @param {function} onLocationUpdate - Callback quando receber localiza√ß√£o
 */
export function startDriverLocationTracking(driverId, rideId, onLocationUpdate) {
  console.log('üìç Iniciando rastreamento do motorista:', driverId);
  
  let trackingInterval = null;
  let isTracking = true;
  
  // Fun√ß√£o para solicitar localiza√ß√£o
  const requestLocation = () => {
    if (!isTracking) return;
    
    console.log('üì° Solicitando localiza√ß√£o do motorista...');
    
    // Emitir evento solicitando localiza√ß√£o
    if (apiService.socket && apiService.socket.connected) {
      apiService.socket.emit('request_driver_location', {
        driverId: driverId,
        rideId: rideId,
        timestamp: Date.now()
      });
    }
    
    // Fazer requisi√ß√£o HTTP como fallback
    fetch(`${apiService.API_BASE_URL}/rides/${rideId}/driver-location`)
      .then(response => response.json())
      .then(data => {
        if (data.location) {
          console.log('üìç Localiza√ß√£o recebida via HTTP:', data.location);
          onLocationUpdate(data.location);
        }
      })
      .catch(error => {
        console.error('‚ùå Erro ao obter localiza√ß√£o:', error);
      });
  };
  
  // Solicitar localiza√ß√£o imediatamente
  requestLocation();
  
  // Solicitar a cada 5 segundos
  trackingInterval = setInterval(requestLocation, 5000);
  
  // Retornar fun√ß√£o para parar o rastreamento
  return () => {
    console.log('üõë Parando rastreamento do motorista');
    isTracking = false;
    if (trackingInterval) {
      clearInterval(trackingInterval);
    }
  };
}

/**
 * Simula localiza√ß√£o do motorista se movendo em dire√ß√£o ao passageiro
 * √ötil para testes quando a API n√£o fornece localiza√ß√£o real
 */
export function simulateDriverMovement(passengerLat, passengerLng, onLocationUpdate) {
  console.log('üéÆ Iniciando simula√ß√£o de movimento do motorista');
  
  // Posi√ß√£o inicial do motorista (1km de dist√¢ncia)
  let currentLat = passengerLat + 0.01;
  let currentLng = passengerLng + 0.01;
  
  const simulationInterval = setInterval(() => {
    // Mover motorista em dire√ß√£o ao passageiro
    const latDiff = passengerLat - currentLat;
    const lngDiff = passengerLng - currentLng;
    
    // Calcular dist√¢ncia
    const distance = Math.sqrt(latDiff * latDiff + lngDiff * lngDiff);
    
    // Se chegou muito perto, parar
    if (distance < 0.0005) { // ~50 metros
      console.log('‚úÖ Motorista chegou (simula√ß√£o)');
      clearInterval(simulationInterval);
      return;
    }
    
    // Mover 10% da dist√¢ncia a cada atualiza√ß√£o
    currentLat += latDiff * 0.1;
    currentLng += lngDiff * 0.1;
    
    // Adicionar um pouco de varia√ß√£o aleat√≥ria para parecer mais real
    currentLat += (Math.random() - 0.5) * 0.0001;
    currentLng += (Math.random() - 0.5) * 0.0001;
    
    const newLocation = {
      lat: currentLat,
      lng: currentLng,
      latitude: currentLat,
      longitude: currentLng,
      timestamp: Date.now()
    };
    
    console.log('üìç [SIMULA√á√ÉO] Nova localiza√ß√£o:', newLocation);
    onLocationUpdate(newLocation);
    
  }, 3000); // Atualizar a cada 3 segundos
  
  // Retornar fun√ß√£o para parar simula√ß√£o
  return () => {
    clearInterval(simulationInterval);
  };
}

export default {
  startDriverLocationTracking,
  simulateDriverMovement
};
// Teste do sistema de precifica√ß√£o competitiva - FRONTEND APENAS
const CompetitivePricingService = require('./src/services/competitivePricingService');

console.log('üéØ TESTE SISTEMA PRECIFICA√á√ÉO FRONTEND');
console.log('=====================================');
console.log('');

// Teste 1: Pre√ßo competitivo baseado na Yango
console.log('1Ô∏è‚É£ COMPARA√á√ÉO COM PRE√áO DA YANGO');
console.log('‚îÄ'.repeat(40));

const yangoPrice = 4000;
const competitive = CompetitivePricingService.calculateCompetitivePrice(yangoPrice);

console.log(`üí∞ Pre√ßo Yango: ${competitive.yangoPrice} Kz`);
console.log(`üí∞ Nosso pre√ßo: ${competitive.ourPrice} Kz`);
console.log(`üéâ Economia: ${competitive.savings} Kz (${competitive.discountPercentage}%)`);
console.log(`‚úÖ Competitivo: ${competitive.isCompetitive ? 'SIM' : 'N√ÉO'}`);
console.log(`üìù Mensagem: ${competitive.message}`);
console.log('');

// Teste 2: Aplicar desconto a pre√ßo original
console.log('2Ô∏è‚É£ APLICAR DESCONTO COMPETITIVO');
console.log('‚îÄ'.repeat(40));

const originalPrice = 3500;
const result = CompetitivePricingService.applyCompetitiveDiscount(originalPrice, yangoPrice);

console.log(`üíµ Pre√ßo original: ${originalPrice} Kz`);
console.log(`üèÜ Pre√ßo Yango: ${yangoPrice} Kz`);
console.log(`üí∞ Pre√ßo final: ${result.finalPrice} Kz`);
console.log(`üéâ Economia: ${result.savings} Kz (${result.discountPercentage}%)`);
console.log('');

// Teste 3: Compara√ß√£o visual para interface
console.log('3Ô∏è‚É£ DADOS PARA INTERFACE');
console.log('‚îÄ'.repeat(40));

const comparison = CompetitivePricingService.getPriceComparison(originalPrice, yangoPrice);

console.log('Dados para mostrar na tela:');
console.log(`‚Ä¢ Pre√ßo original: ${comparison.prices.original.formatted}`);
console.log(`‚Ä¢ Pre√ßo Yango: ${comparison.prices.yango.formatted}`);
console.log(`‚Ä¢ Pre√ßo final: ${comparison.prices.final.formatted}`);
console.log(`‚Ä¢ Economia: ${comparison.savings.formatted} (${comparison.savings.percentage})`);
console.log(`‚Ä¢ Mostrar compara√ß√£o: ${comparison.showComparison ? 'SIM' : 'N√ÉO'}`);
console.log(`‚Ä¢ √â competitivo: ${comparison.isCompetitive ? 'SIM' : 'N√ÉO'}`);
console.log('');

// Teste 4: Simula√ß√£o de v√°rios cen√°rios
console.log('4Ô∏è‚É£ SIMULA√á√ÉO M√öLTIPLOS PRE√áOS');
console.log('‚îÄ'.repeat(40));

const scenarios = CompetitivePricingService.simulate([3000, 4000, 5000, 6000, 8000]);
scenarios.forEach(scenario => {
  console.log(`${scenario.scenario} ‚Üí Nosso: ${scenario.ourPrice} Kz (economia: ${scenario.savings} Kz)`);
});
console.log('');

// Teste 5: Valida√ß√£o competitiva
console.log('5Ô∏è‚É£ VALIDA√á√ÉO SE PRE√áO √â COMPETITIVO');
console.log('‚îÄ'.repeat(40));

const validation = CompetitivePricingService.validateCompetitive(3700, 4000);
console.log(`‚úÖ Pre√ßo v√°lido: ${validation.isValid ? 'SIM' : 'N√ÉO'}`);
console.log(`üìù Mensagem: ${validation.message}`);
if (validation.recommendation) {
  console.log(`üí° Recomenda√ß√£o: ${validation.recommendation}`);
}
if (validation.suggestedPrice) {
  console.log(`üí∞ Pre√ßo sugerido: ${validation.suggestedPrice} Kz`);
}
console.log('');

// Teste 6: Formata√ß√£o de pre√ßos
console.log('6Ô∏è‚É£ FORMATA√á√ÉO DE PRE√áOS');
console.log('‚îÄ'.repeat(40));

const prices = [1500, 4000, 12500, 50000];
prices.forEach(price => {
  console.log(`${price} ‚Üí ${CompetitivePricingService.formatPrice(price)}`);
});
console.log('');

// Teste 7: Configura√ß√£o atual
console.log('7Ô∏è‚É£ CONFIGURA√á√ÉO ATUAL');
console.log('‚îÄ'.repeat(40));

const config = CompetitivePricingService.getConfig();
console.log('Descontos por faixa:');
console.log(`‚Ä¢ Corridas curtas (‚â§2000): ${(config.discountByRange.short * 100).toFixed(1)}%`);
console.log(`‚Ä¢ Corridas m√©dias (2000-6000): ${(config.discountByRange.medium * 100).toFixed(1)}%`);
console.log(`‚Ä¢ Corridas longas (>6000): ${(config.discountByRange.long * 100).toFixed(1)}%`);
console.log('');

console.log('üéâ RESUMO');
console.log('‚ïê'.repeat(50));
console.log('‚úÖ Sistema de precifica√ß√£o competitiva FRONTEND implementado');
console.log('‚úÖ Funciona sem modificar a API');
console.log('‚úÖ Calcula pre√ßos 7,5% a 10% mais baratos que a Yango');
console.log('‚úÖ Interface de compara√ß√£o visual pronta');
console.log('‚úÖ Componentes React Native criados');
console.log('');
console.log('üì± COMPONENTES CRIADOS:');
console.log('‚Ä¢ CompetitivePricingService.js - L√≥gica de precifica√ß√£o');
console.log('‚Ä¢ CompetitivePriceComparison.js - Componente visual');
console.log('‚Ä¢ TripConfirmationWithPricing.js - Modal completo');
console.log('');
console.log('üí° EXEMPLO DE USO:');
console.log(`
import CompetitivePricingService from './services/competitivePricingService';

// Calcular pre√ßo competitivo
const competitive = CompetitivePricingService.calculateCompetitivePrice(4000);
console.log(\`Yango: 4000 Kz ‚Üí Nosso: \${competitive.ourPrice} Kz\`);

// Usar no componente
<CompetitivePriceComparison 
  originalPrice={3500}
  yangoPrice={4000}
/>
`);

console.log('‚úÖ Pronto para usar no app sem tocar na API!');